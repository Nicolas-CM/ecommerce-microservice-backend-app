name: STAGE - Full Tests & Deploy to Minikube

on:
  push:
    branches: [ stage ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build & All Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: 🔨 Build All Services
        run: ./mvnw clean package -DskipTests
      
      - name: 🧪 Run Unit Tests
        run: ./mvnw test
      
      - name: 📊 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: All Unit Tests
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit
          fail-on-error: false
      
      - name: 📦 Upload JARs
        uses: actions/upload-artifact@v3
        with:
          name: microservices-jars
          path: |
            */target/*.jar
            !*/target/*-sources.jar
            !*/target/*-javadoc.jar
          retention-days: 7
  
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📥 Download JARs
        uses: actions/download-artifact@v3
        with:
          name: microservices-jars
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: 🔨 Build Docker Images
        run: |
          services="service-discovery cloud-config api-gateway proxy-client user-service product-service order-service payment-service shipping-service favourite-service"
          for service in $services; do
            echo "Building $service..."
            cd $service
            docker build -t $service:latest -t $service:${{ github.sha }} .
            cd ..
          done
      
      - name: 💾 Save Docker Images
        run: |
          mkdir -p docker-images
          services="user-service product-service order-service"
          for service in $services; do
            docker save $service:latest > docker-images/$service.tar
          done
      
      - name: 📦 Upload Docker Images
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: docker-images/*.tar
          retention-days: 1
  
  deploy-to-minikube:
    name: Deploy to Minikube
    runs-on: ubuntu-latest
    needs: build-docker-images
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🚀 Start Minikube
        uses: medyagh/setup-minikube@latest
        with:
          cpus: 4
          memory: 8192
          kubernetes-version: v1.28.0
      
      - name: 📥 Download Docker Images
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          path: docker-images
      
      - name: 📦 Load Images to Minikube
        run: |
          for image in docker-images/*.tar; do
            echo "Loading $(basename $image)"
            minikube image load $image
          done
      
      - name: ☸️ Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/base/namespace.yaml
          kubectl apply -f k8s/base/configmaps.yaml
          kubectl apply -f k8s/base/
          
          echo "Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment --all -n ecommerce || true
      
      - name: 📊 Check Deployment Status
        run: |
          echo "=== Pods Status ==="
          kubectl get pods -n ecommerce
          
          echo "=== Services ==="
          kubectl get svc -n ecommerce
      
      - name: 🧪 Run E2E Tests
        run: |
          echo "Running E2E tests against Minikube deployment..."
          # Port-forward para acceder a los servicios
          kubectl port-forward -n ecommerce svc/product-service 8500:8500 &
          kubectl port-forward -n ecommerce svc/user-service 8700:8700 &
          sleep 10
          
          # Pruebas básicas
          curl -f http://localhost:8500/product-service/api/products || echo "Product service test failed"
          curl -f http://localhost:8700/user-service/api/users || echo "User service test failed"
  
  summary:
    name: STAGE Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker-images, deploy-to-minikube]
    if: always()
    
    steps:
      - name: 📋 Create Summary
        run: |
          echo "## 🎯 STAGE Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Test: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.build-docker-images.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Minikube Deploy: ${{ needs.deploy-to-minikube.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** STAGE" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
