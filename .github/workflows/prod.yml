name: PROD - Full Pipeline with Performance Tests

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Services
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: 🔨 Build All Services
        run: ./mvnw clean package -DskipTests
      
      - name: 📦 Upload JARs
        uses: actions/upload-artifact@v3
        with:
          name: microservices-jars
          path: |
            */target/*.jar
            !*/target/*-sources.jar
          retention-days: 30
  
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: 🧪 Run Unit Tests
        run: ./mvnw test
      
      - name: 📊 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests Report
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: 🧪 Run Integration Tests
        run: ./mvnw verify -DskipUnitTests=true
      
      - name: 📊 Publish Integration Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Integration Tests Report
          path: '**/target/failsafe-reports/*.xml'
          reporter: java-junit
  
  build-docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📥 Download JARs
        uses: actions/download-artifact@v3
        with:
          name: microservices-jars
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: 🔨 Build Docker Images
        run: |
          VERSION="${{ github.run_number }}"
          services="service-discovery cloud-config api-gateway proxy-client user-service product-service order-service payment-service shipping-service favourite-service"
          
          for service in $services; do
            echo "Building $service:$VERSION..."
            cd $service
            docker build -t $service:$VERSION -t $service:latest .
            cd ..
          done
      
      - name: 💾 Save Docker Images
        run: |
          mkdir -p docker-images
          VERSION="${{ github.run_number }}"
          services="service-discovery cloud-config api-gateway user-service product-service order-service"
          
          for service in $services; do
            docker save $service:$VERSION > docker-images/$service.tar
          done
      
      - name: 📦 Upload Docker Images
        uses: actions/upload-artifact@v3
        with:
          name: prod-docker-images
          path: docker-images/*.tar
          retention-days: 30
  
  deploy-to-minikube:
    name: Deploy to Minikube (Production-like)
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🚀 Start Minikube
        uses: medyagh/setup-minikube@latest
        with:
          cpus: 4
          memory: 8192
          kubernetes-version: v1.28.0
      
      - name: 📥 Download Docker Images
        uses: actions/download-artifact@v3
        with:
          name: prod-docker-images
          path: docker-images
      
      - name: 📦 Load Images to Minikube
        run: |
          for image in docker-images/*.tar; do
            minikube image load $image
          done
      
      - name: ☸️ Deploy Infrastructure
        run: |
          kubectl apply -f k8s/base/namespace.yaml
          kubectl apply -f k8s/base/configmaps.yaml
          kubectl apply -f k8s/base/zipkin.yaml
          kubectl apply -f k8s/base/service-discovery.yaml
          kubectl apply -f k8s/base/cloud-config.yaml
          
          echo "Waiting for infrastructure..."
          sleep 60
      
      - name: ☸️ Deploy Microservices
        run: |
          kubectl apply -f k8s/base/
          
          echo "Waiting for deployments..."
          kubectl wait --for=condition=available --timeout=300s deployment --all -n ecommerce || true
      
      - name: 📊 Check Deployment
        run: |
          kubectl get all -n ecommerce
          kubectl get pods -n ecommerce -o wide
  
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-to-minikube
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🚀 Start Minikube
        uses: medyagh/setup-minikube@latest
      
      - name: 🔌 Port Forward Services
        run: |
          kubectl port-forward -n ecommerce svc/product-service 8500:8500 &
          kubectl port-forward -n ecommerce svc/user-service 8700:8700 &
          kubectl port-forward -n ecommerce svc/order-service 8300:8300 &
          sleep 20
      
      - name: 🧪 Run E2E Tests
        run: |
          echo "Testing Product Service..."
          curl -f http://localhost:8500/product-service/api/products || echo "FAIL"
          
          echo "Testing User Service..."
          curl -f http://localhost:8700/user-service/api/users || echo "FAIL"
          
          echo "Testing Order Service..."
          curl -f http://localhost:8300/order-service/api/orders || echo "FAIL"
  
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-to-minikube
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 📦 Install Locust
        run: pip install locust
      
      - name: 🚀 Start Minikube
        uses: medyagh/setup-minikube@latest
      
      - name: 🔌 Port Forward Services
        run: |
          kubectl port-forward -n ecommerce svc/product-service 8500:8500 &
          kubectl port-forward -n ecommerce svc/user-service 8700:8700 &
          sleep 20
      
      - name: ⚡ Run Performance Tests
        run: |
          cd tests/performance
          locust -f locustfile.py --headless \
            --users 50 \
            --spawn-rate 5 \
            --run-time 3m \
            --host http://localhost:8500 \
            --html performance-report.html \
            --csv performance-results
      
      - name: 📊 Upload Performance Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: tests/performance/performance-*
          retention-days: 30
  
  summary:
    name: Production Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build, unit-tests, integration-tests, build-docker, deploy-to-minikube, e2e-tests, performance-tests]
    if: always()
    
    steps:
      - name: 📋 Create Detailed Summary
        run: |
          echo "# 🚀 Production Pipeline - Run #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy-to-minikube.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Deployment Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Check performance report artifact" >> $GITHUB_STEP_SUMMARY
          echo "- Review test coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployed services" >> $GITHUB_STEP_SUMMARY
